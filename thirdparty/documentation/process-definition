#!/usr/bin/lua

local printer = {}

local function trim(str, what)
	what = what or "%s"
	return (str:match("^["..what.."]*(.-)["..what.."]*$")) or str
end

local function split(str, with)
	local arr = {}
	str:gsub("[^" .. with .. "]+", function(val)
		table.insert(arr, val)
	end)
	return arr
end

function printer.prototype(func)
	local args = {}
	local returns = func.rets and func.rets[1] or "void"
	
	for _, arg in pairs(func.args) do
		local argfmt = arg[1]
		if arg[2] ~= "" then
			argfmt = arg[1] .. " " .. arg[2]
		end
		table.insert(args, argfmt)
	end
	
	return returns .. " " .. func.name .. "(" .. table.concat(args, ", ") .. ")"
end

function printer.print_lib(lib)
	print("# " .. lib.name)
	print()
	for _, header in pairs(lib.headers) do
		print(("\t#include <%s>"):format(header))
	end
	print()
	
	if lib.info and trim(lib.info) ~= "" then
		print(lib.info)
		print()
	end
	
	if lib.defines and #lib.defines > 0 then
		error("not imp")
	end
	
	if lib.types and #lib.types > 0 then
		print("## Types")
		print()
		for _, typ in pairs(lib.types) do
			print("### `" .. typ[1] .. "`")
			print()
			print("\t" .. typ[2]:gsub("\n", "\n\t"))
			print()
			print(typ[3])
			print()
		end
	end
	
	if lib.globals and #lib.globals > 0 then
		error("not imp")
	end
	
	if lib.macros and #lib.macros > 0 then
		print("## Macros")
		for _, macro in pairs(lib.macros) do
			local args = {}
			local outs = {}
			
			for _, arg in pairs(macro.args) do
				if arg.out then
					table.insert(outs, arg)
				else
					if trim(arg[3]) ~= "" then
						table.insert(args, arg)
					end
				end
			end
			
			print()
			print("### `" .. printer.prototype(macro) .. "`")
			print()
			print(macro.info)
			print()
			
			if #args > 0 then
				print("#### Arguments")
				print()
				for _, arg in pairs(args) do	
					local name = arg[2] ~= "" and arg[2] or arg[1]
					print(string.format(" - `%s`: %s", name, arg[3]))
					print()
				end
			end
			
			if #outs > 0 then
				print("#### Outputs")
				print()
				for _, out in pairs(outs) do
					print(string.format(" - `%s`: %s", out[2], out[3]))
					print()
				end
			end
			if macro.rets and macro.rets[2] ~= "void" then
				print("#### Returns")
				print()
				print(macro.rets[2])
				print()
			end
		end
	end
	
	if lib.functions and #lib.functions > 0 then
		print("## Functions")
		for _, func in pairs(lib.functions) do
			local args = {}
			local outs = {}
			
			for _, arg in pairs(func.args) do
				if arg.out then
					table.insert(outs, arg)
				else
					if trim(arg[3]) ~= "" then
						table.insert(args, arg)
					end
				end
			end
			
			print()
			print("### `" .. printer.prototype(func) .. "`")
			print()
			print(func.info)
			print()
			
			if #args > 0 then
				print("#### Arguments")
				print()
				for _, arg in pairs(args) do	
					local name = arg[2] ~= "" and arg[2] or arg[1]
					print(string.format(" - `%s`: %s", name, arg[3]))
					print()
				end
			end
			
			if #outs > 0 then
				print("#### Outputs")
				print()
				for _, out in pairs(outs) do
					print(string.format(" - `%s`: %s", out[2], out[3]))
					print()
				end
			end
			if func.rets and func.rets[2] ~= "void" then
				print("#### Returns")
				print()
				print(func.rets[2])
				print()
			end
		end
	end
end

local lines = {}
local lines_numbers = {}
local line_n = 0

local function get_line()
	line_n = line_n + 1
	return lines[line_n]
end

local function peek_line()
	return lines[line_n + 1] or "", line_n + 1 > #lines
end

do
	local f = assert(io.open(arg[1]))
	local i = 0
	while true do
		local l = f:read("*l")
		i = i + 1
		if not l then break end
		
		if not l:match("%s*#") then
			table.insert(lines, l)
			table.insert(lines_numbers, i)
		end
	end
	f:close()
end

local lib = {
	name = "N.A.",
	headers = {},
	defines = {},
	globals = {},
	types = {},
	functions = {},
	macros = {}
}

local function parse_error(why, ...)
	local args = table.pack(...)
	if args.n > 0 then
		why = why:format(...)
	end
	
	local n = lines_numbers[line_n] or lines_numbers[#lines_numbers]
	io.stderr:write(string.format("%s:%d: %s\n", arg[1], n, why))
	os.exit(1)
end

local directives = {}

local function read_long_directive(depth)
	local info_lines = {}
	while true do
		local line = peek_line()
		if not line:match("^"..depth..".*") then break end
		
		line = get_line():match(depth.."(.*)")
		table.insert(info_lines, line)
	end
	return table.concat(info_lines, "\n")
end

-- key, keyvalue, value[, depth]
local function read_key(depth)
	depth = depth or ""
	local line, eof = peek_line()
	if eof then return nil end
	if not line:match("^"..depth..".*") then return nil end
	
	line = get_line():match(depth.."(.*)")
	
	if trim(line) == "" then
		-- is a blank line, retry
		return read_key(depth)
	end
	
	local key, value = line:match("^([^:]+): *(.*)")
	if not key then
		parse_error("bad line")
	end
	
	local sub_key, sub_value = key:match("^(.-)%((.-)%)")
	key = sub_key or key
	
	if trim(value) == ":" then
		value = read_long_directive(depth.."\t")
		depth = nil -- long values can't have children
	end
	
	return key, sub_value, value, (depth and depth.."\t")
end

local function read_directives(name, tbl, depth)
	while true do
		local k, kv, v, d = read_key(depth)
	
		if not k then break end
	
		local f = tbl[k]
		if not f then
			parse_error("unknown %s directive: %s", name, k)
		end
		f(kv, v, d)
	end
end

--[[ definition stuff starts here. ]]

do
	function directives.Name(kv, v, depth)
		lib.name = trim(assert(v))
	end
	
	function directives.Info(kv, v, depth)
		lib.info = trim(assert(v))
	end
	
	function directives.Header(kv, v, depth)
		table.insert(lib.headers, trim(v))
	end
	
	function directives.Type(_, name, depth)
		if not depth then parse_error("Type directive may not be long") end
		
		name = trim(name)
		local type_directives = {}
		local t = {name, "void", ""}
		
		function type_directives.Definition(kv, v)
			t[2] = trim(v)
		end
		
		function type_directives.Info(kv, v)
			t[3] = trim(v)
		end
		
		read_directives("type", type_directives, depth)
		table.insert(lib.types, t)
	end
	
	function directives.Function(kv, v, depth)
		local func = {
			name = trim(v),
			info = "",
			args = {},
			rets = nil,
		}
		
		local func_directives = {}
		function func_directives.Arg(typeinfo, info)
			local arr = split(typeinfo, ",")
			
			local id = arr[2] or ""
			local typename = arr[1]
			
			if not typename then parse_error("subkey: expected a type") end
			table.insert(func.args, {trim(typename), trim(id), info})
		end
		function func_directives.Out(...)
			func_directives.Arg(...)
			func.args[#func.args].out = true
		end
		function func_directives.Ret(typeinfo, info)
			func.rets = {typeinfo, info}
		end
		function func_directives.Info(typeinfo, info)
			func.info = info
		end
		
		read_directives("function", func_directives, depth)
		table.insert(lib.functions, func)
	end
	
	function directives.Macro(kv, v, depth)
		local macro = {
			name = trim(v),
			info = "",
			args = {},
			rets = nil,
		}
		
		local macro_directives = {}
		function macro_directives.Arg(typeinfo, info)
			local arr = split(typeinfo, ",")
			
			local id = arr[2] or ""
			local typename = arr[1]
			
			if not typename then parse_error("subkey: expected a type") end
			table.insert(macro.args, {trim(typename), trim(id), info})
		end
		function macro_directives.Out(...)
			mac_directives.Arg(...)
			macro.args[#macro.args].out = true
		end
		function macro_directives.Ret(typeinfo, info)
			macro.rets = {typeinfo, info}
		end
		function macro_directives.Info(typeinfo, info)
			macro.info = info
		end
		
		read_directives("macro", macro_directives, depth)
		table.insert(lib.macros, macro)
	end
end

read_directives("global", directives)

printer.print_lib(lib)

