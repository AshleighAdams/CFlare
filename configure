#!/usr/bin/lua

local function find_arg(name, default)
	local function escape_pattern(i)
		return (i:gsub("[%-%+%(%)%[%]%.%?]", "%%%1"))
	end
	
	name = escape_pattern(name)
	local patt = string.format("%%-%%-%s=(.+)", name)
	for k,v in pairs(arg) do
		local found = v:match(patt) or (v:match("%-%-" .. name) and "" or nil)
		if found then return found end
	end
	
	return default
end

function detect_platform()
	local system = io.popen("uname -s"):read("*l")
	
	-- http://en.wikipedia.org/wiki/C_POSIX_library for posix#n (#n is issue)
	if system == "FreeBSD" then
		platform.unix = true
		platform.posix1 = true
		platform.posix2 = true
		platform.posix3 = true
		platform.posix4 = true
		platform.posix5 = true
		platform.posix6 = true
		platform.freebsd = true
		platform.bsd = true
		platform.gnu = true
	elseif system == "OpenBSD" then
		platform.unix = true
		platform.posix1 = true
		platform.posix2 = true
		platform.posix3 = true
		platform.posix4 = true
		platform.posix5 = true
		platform.posix6 = true
		platform.openbsd = true
		platform.bsd = true
		platform.gnu = true
	elseif system == "NetBSD" then
		platform.unix = true
		platform.posix1 = true -- not fully compliant, like linux
		platform.posix2 = true
		platform.posix3 = true
		platform.posix4 = true
		platform.posix5 = true
		platform.posix6 = true
		platform.netbsd = true
		platform.bsd = true
	elseif system == "Darwin" then
		platform.unix = true
		platform.posix1 = true
		platform.posix2 = true
		platform.posix3 = true
		platform.posix4 = true
		platform.posix5 = true
		platform.posix6 = true
		platform.osx = true
		platform.bsd = true
		platform.gnu = true
	elseif system == "Linux" then
		platform.unix = true
		platform.linux = true
		platform.posix1 = true -- untested which of these are, so may be wrong
		platform.posix2 = true
		platform.posix3 = true
		platform.posix4 = true
		platform.posix5 = true
		platform.posix6 = true
		platform.gnu = true
	elseif system == "SunOS" then
		platform.unix = true
		platform.posix1 = true
		platform.posix2 = true
		platform.posix3 = true
		platform.posix4 = true
		platform.posix5 = true
		platform.posix6 = true
		platform.solaris = true
	elseif system and system:match("^CYGWIN") then
		platform.windows = true
		platform.unix = true
		platform.posix1 = true
		platform.posix2 = true
		platform.posix3 = true
		platform.posix4 = true
		platform.posix5 = true
		platform.posix6 = true
		platform.cygwin = true
		platform.gnu = true
	elseif system and system:match("^Windows") then
		platform.windows = true
		platform.posix1 = true
	elseif system and system:match("^MINGW") then
		platform.windows = true
		platform.mingw = true
		platform.gnu = true
		platform.posix1 = true
	else
		detected.unix = true
	end
	
	for platform,_ in pairs(platform) do
		defines[platform:upper()] = true
	end
end

platform = {}
defines = {}
cflags = {"-Wall", "-std=c11", "-I./src"}
lflags = {}
ldflags = {"-L."}
libs = {"pthread", "m"}
prefix = find_arg("prefix", "/usr/local")
release = find_arg("release")
cc = find_arg("cc", os.getenv("CC") or "cc")
pic = "-fPIC"

detect_platform()

if platform.gnu then
	defines._GNU_SOURCE = true
end

if release then
	table.insert(cflags, "-O2")
else
	table.insert(cflags, "-g")
end

if platform.linux then -- make sure gcc looks for libs in current dir when running
	table.insert(ldflags, "-Wl,-R -Wl,.")
end

if platform.windows then
	pic = "-fpic"
end

do
	local p = assert(io.popen("git describe --tags"))
	local version = p:read("*l")
	local okay = p:close()
	
	if not okay then
		os.execute("git fetch -t") -- fetch the tags
		
		local depth = 100
		for i = depth, 1000, 100 do
			os.execute("git fetch --depth="..depth)
			if os.execute("git describe --tags") then
				print("found tag that describes us at fetch depth of " .. depth)
				
				-- re-fetch
				p = assert(io.popen("git describe --tags"))
				version = p:read("*l")
				okay = p:close()
				break
			end
		end
	end
	
	if okay then
		version_major, version_minor = version:match("(%d+).(%d+)")
		version_patch = version:match("%d+.%d+%-(%d+)") or 0
	else
		io.stderr:write("warning: could not get version from git describe; falling back to 0.0.0\n")
		version_major, version_minor, version_patch = 0, 0, 0
	end
	
	defines["CFLARE_VERSION_MAJOR"] = version_major
	defines["CFLARE_VERSION_MINOR"] = version_minor
	defines["CFLARE_VERSION_PATCH"] = version_patch
end

for name, value in pairs(defines) do
	local cflag = string.format("-D%s", name)
	if value ~= true then
		cflag = cflag.."="..value
	end
	table.insert(cflags, cflag)
end

for k,v in pairs(libs) do
	libs[k] = string.format("-l%s", v)
end

local config = {
	"PREFIX  ?= " .. prefix;
	"LIBS    += " .. table.concat(libs, " ");
	"CFLAGS  += " .. table.concat(cflags, " ");
	"LFLAGS  += " .. table.concat(lflags, " ");
	"LDFLAGS += " .. table.concat(ldflags, " ");
	"CC       = " .. cc;
	"TARGET   = " .. "cflare";
	"RELEASE  = " .. (release and "1" or "0");
	"LIB_EXTENSION = " .. (function()
			if platform.windows then
				return "dll"
			elseif platform.osx then
				return "dylib"
			else
				return "so"
			end
		end)(),
	"VERSION_MAJOR = " .. version_major,
	"VERSION_MINOR = " .. version_minor,
	"VERSION_PATCH = " .. version_patch,
	"PIC           = " .. pic
}

do
	table.insert(config, "LIB_OBJECTS = $(patsubst %.c, %.o, $(wildcard src/cflare/**/*.c) $(wildcard src/cflare/*.c))")
	table.insert(config, "LIB_HEADERS = $(wildcard src/cflare/**/*.h) $(wildcard src/cflare/*.h)")
	
	table.insert(config, "EXE_SOURCES = $(wildcard src/*.c)")
	table.insert(config, "EXE_HEADERS = $(wildcard src/*.h)")
end


-- platform specific stuff
do
	local platform_sources = {
		["cflare/filesystem.h"] = {
			["cflare-posix/filesystem.c"] = {
				name = "dirent",
				platforms = {
					posix2 = 1
				}
			}
		},
		["cflare/mutex.h"] = {
			["cflare-posix/mutex.c"] = {
				name = "pthreads",
				platforms = {
					posix5 = 1
				}
			},
			["cflare-windows/mutex.c"] = {
				name = "SRWLock",
				platforms = {
					windows = 0.75 -- the posix one is better, if we can use it
				}
			}
		}
	}

	for api, imps in pairs(platform_sources) do
		local okay = {}
		for src, imp in pairs(imps) do
			local priority = 0
			local why = {}
			for plat, prior in pairs(imp.platforms) do
				if platform[plat] then
					if prior > priority then
						priority = prior
					end
					table.insert(why, ("%s=%d%%"):format(plat, prior*100))
				end
			end
			
			if #why == 1 then
				why = why[1]:match("([^=]+)")
			else
				why = table.concat(why, ", ")
			end
			
			if priority > 0 then
				table.insert(okay, {priority = priority, src = src, name = imp.name, why = why})
			end
		end
		
		table.sort(okay, function(a,b) return a.priority > b.priority end)
		
		print(api..":")
		local imp = table.remove(okay, 1)
		
		if imp then
			print(string.format("*\t%s: %s; priority: %d%% (%s)", imp.src, imp.name, imp.priority*100, imp.why))
			for _, other in pairs(okay) do
				print(string.format("\t%s: %s; priority: %d%% (%s)", other.src, other.name, other.priority*100, other.why))
			end
		else
			print(string.format("error: nothing can implement %s on your platform", api))
			return os.exit(1)
		end
		
		table.insert(config, string.format("LIB_HEADERS += src/%s", imp.src))
		table.insert(config, string.format("LIB_OBJECTS += src/%s", imp.src:gsub("%.c$", ".o")))
	end
end

config = table.concat(config, "\n") .. "\n"

local f = assert(io.open("config", "w"))
f:write(config)
f:close()
