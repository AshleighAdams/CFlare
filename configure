#!/usr/bin/lua

local function find_arg(name, default)
	local function escape_pattern(i)
		return (i:gsub("[%-%+%(%)%[%]%.%?]", "%%%1"))
	end
	
	name = escape_pattern(name)
	local patt = string.format("%%-%%-%s=(.+)", name)
	for k,v in pairs(arg) do
		local found = v:match(patt) or (v:match("%-%-" .. name) and "" or nil)
		if found then return found end
	end
	
	return default
end

function detect_platform()
	local system = io.popen("uname -s"):read("*l")
	
	if system == "FreeBSD" then
		platform.posix = true
		platform.freebsd = true
		platform.bsd = true
		platform.gnu = true
	elseif system == "OpenBSD" then
		platform.posix = true
		platform.openbsd = true
		platform.bsd = true
		platform.gnu = true
	elseif system == "NetBSD" then
		platform.posix = true
		platform.netbsd = true
		platform.bsd = true
	elseif system == "Darwin" then
		platform.posix = true
		platform.osx = true
		platform.bsd = true
		platform.gnu = true
	elseif system == "Linux" then
		platform.posix = true
		platform.linux = true
		platform.gnu = true
	elseif system == "SunOS" then
		platform.posix = true
		platform.solaris = true
	elseif system and system:match("^CYGWIN") then
		platform.windows = true
		platform.posix = true
		platform.cygwin = true
		platform.gnu = true
	elseif system and system:match("^Windows") then
		platform.windows = true
	elseif system and system:match("^MINGW") then
		platform.windows = true
		platform.mingw = true
		platform.gnu = true
	else
		detected.unix = true
	end
	
	for platform,_ in pairs(platform) do
		defines[platform:upper()] = true
	end
end

platform = {}
defines = {}
cflags = {"-Wall", "-std=c11", "-I./src"}
lflags = {}
ldflags = {"-L."}
libs = {"pthread", "m"}
prefix = find_arg("prefix", "/usr/local")
release = find_arg("release")
cc = find_arg("cc", os.getenv("CC") or "cc")

detect_platform()

if platform.gnu then
	defines._GNU_SOURCE = true
end

if release then
	table.insert(cflags, "-O2")
else
	table.insert(cflags, "-g")
end

if platform.linux then -- make sure gcc looks for libs in current dir when running
	table.insert(ldflags, "-Wl,-R -Wl,.")
end

do
	local p = assert(io.popen("git describe --tags --always"))
	local version = p:read("*l")
	p:close()
	
	version_major, version_minor = version:match("(%d+).(%d+)")
	version_patch = version:match("%d+.%d+%-(%d+)") or 0
	
	defines["CFLARE_VERSION_MAJOR"] = version_major
	defines["CFLARE_VERSION_MINOR"] = version_minor
	defines["CFLARE_VERSION_PATCH"] = version_patch
end

for name, value in pairs(defines) do
	local cflag = string.format("-D%s", name)
	if value ~= true then
		cflag = cflag.."="..value
	end
	table.insert(cflags, cflag)
end

for k,v in pairs(libs) do
	libs[k] = string.format("-l%s", v)
end

local config = {
	"PREFIX  ?= " .. prefix;
	"LIBS    += " .. table.concat(libs, " ");
	"CFLAGS  += " .. table.concat(cflags, " ");
	"LFLAGS  += " .. table.concat(lflags, " ");
	"LDFLAGS += " .. table.concat(ldflags, " ");
	"CC       = " .. cc;
	"TARGET   = " .. "cflare";
	"RELEASE  = " .. (release and "1" or "0");
	"LIB_EXTENSION = " .. (function()
			if platform.windows then
				return "dll"
			elseif platform.osx then
				return "dylib"
			else
				return "so"
			end
		end)(),
	"VERSION_MAJOR = " .. version_major,
	"VERSION_MINOR = " .. version_minor,
	"VERSION_PATCH = " .. version_patch,
}

do
	table.insert(config, "LIB_OBJECTS = $(patsubst %.c, %.o, $(wildcard src/cflare/**/*.c) $(wildcard src/cflare/*.c))")
	table.insert(config, "LIB_HEADERS = $(wildcard src/cflare/**/*.h) $(wildcard src/cflare/*.h)")
	
	table.insert(config, "EXE_SOURCES = $(wildcard src/*.c)")
	table.insert(config, "EXE_HEADERS = $(wildcard src/*.h)")

	if platform.windows then
		table.insert(config, "LIB_OBJECTS += $(patsubst %.c, %.o, $(wildcard src/cflare-windows/**/*.c) $(wildcard src/cflare-windows/*.c))")
		table.insert(config, "LIB_HEADERS += $(wildcard src/cflare-windows/**/*.h) $(wildcard src/cflare-windows/*.h)")
	elseif platform.posix then
		table.insert(config, "LIB_OBJECTS += $(patsubst %.c, %.o, $(wildcard src/cflare-posix/**/*.c) $(wildcard src/cflare-posix/*.c))")
		table.insert(config, "LIB_HEADERS += $(wildcard src/cflare-posix/**/*.h) $(wildcard src/cflare-posix/*.h)")
	end
end



config = table.concat(config, "\n")
--print()

local f = assert(io.open("config", "w"))
f:write(config)
f:close()
